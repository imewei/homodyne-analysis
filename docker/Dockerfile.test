# Modern Containerized Testing Environment for Homodyne Analysis
# =============================================================
# Multi-stage Docker build for efficient testing with scientific computing stack

ARG PYTHON_VERSION=3.11
FROM python:${PYTHON_VERSION}-slim as base

# Build arguments
ARG BUILDPLATFORM
ARG TARGETPLATFORM
ARG BUILDARCH
ARG TARGETARCH

# Environment configuration
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_NO_CACHE_DIR=1 \
    DEBIAN_FRONTEND=noninteractive

# System dependencies for scientific computing
RUN apt-get update && apt-get install -y \
    build-essential \
    gcc \
    g++ \
    gfortran \
    libblas-dev \
    liblapack-dev \
    libopenmpi-dev \
    pkg-config \
    git \
    curl \
    && rm -rf /var/lib/apt/lists/*

# =============================================================================
# Development Dependencies Stage
# =============================================================================

FROM base as dev-deps

# Install Python development tools
RUN pip install --upgrade pip setuptools wheel

# Copy requirements first for better caching
COPY pyproject.toml /workspace/
WORKDIR /workspace

# Install package with all development dependencies
RUN pip install -e .[test,quality,performance,dev]

# =============================================================================
# Testing Environment Stage
# =============================================================================

FROM dev-deps as test-env

# Copy source code
COPY . /workspace/

# Create reports directory
RUN mkdir -p /workspace/reports

# Install package in development mode
RUN pip install -e .

# Set working directory
WORKDIR /workspace

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD python -c "import homodyne; print('Package imported successfully')" || exit 1

# Default command for testing
CMD ["pytest", "homodyne/tests", "--cov=homodyne", "--cov-report=xml:/workspace/reports/coverage.xml"]

# =============================================================================
# Performance Testing Stage
# =============================================================================

FROM test-env as performance

# Install additional performance tools
RUN pip install \
    py-spy \
    memory-profiler \
    scalene \
    pytest-benchmark

# Performance testing command
CMD ["pytest", "homodyne/tests", "-m", "performance", "--benchmark-only"]

# =============================================================================
# Security Testing Stage
# =============================================================================

FROM test-env as security

# Install security scanning tools
RUN pip install \
    bandit \
    safety \
    pip-audit

# Security testing command
CMD ["pytest", "homodyne/tests", "-m", "security"]

# =============================================================================
# Documentation Building Stage
# =============================================================================

FROM base as docs

# Install documentation dependencies
RUN pip install --upgrade pip

COPY pyproject.toml /workspace/
WORKDIR /workspace

RUN pip install -e .[docs]

# Copy source for documentation
COPY . /workspace/

# Build documentation
CMD ["sphinx-build", "-W", "-b", "html", "docs", "docs/_build/html"]
[tool:pytest]
# PyTest configuration for homodyne test suite

# Test discovery
testpaths = homodyne/tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Minimum version requirements
minversion = 6.0

# Add current directory to Python path
addopts =
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --durations=10
    --color=yes
    --cov=homodyne
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-fail-under=80
    --maxfail=5

# Test markers
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    integration: marks tests as integration tests
    performance: marks tests as performance benchmarks
    security: marks tests as security tests
    scientific: marks tests as scientific validation tests
    cli: marks tests as CLI tests
    gpu: marks tests that require GPU acceleration
    distributed: marks tests for distributed computing
    unit: marks tests as unit tests
    regression: marks tests as regression tests
    benchmark: marks tests as benchmarks

# Filtering options
filterwarnings =
    error
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::ImportWarning
    ignore::ResourceWarning
    ignore::RuntimeWarning:numba.*
    ignore::FutureWarning:scipy.*
    ignore::FutureWarning:numpy.*

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = tests.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(name)s: %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Timeout for individual tests (in seconds)
timeout = 300

# Parallel execution (requires pytest-xdist)
# Uncomment to enable parallel execution
# -n auto

# Coverage configuration
[coverage:run]
source = homodyne
omit =
    */tests/*
    */test_*
    */__pycache__/*
    */setup.py
    */conftest.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml
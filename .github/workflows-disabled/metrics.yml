name: CI Metrics & Performance

"on":
  workflow_run:
    workflows: ["Continuous Integration", "Fast CI", "Optimized CI"]
    types:
      - completed
  schedule:
    # Run weekly metrics report
    - cron: "0 9 * * 1"
  workflow_dispatch:

env:
  PYTHONDONTWRITEBYTECODE: 1
  PYTHONUNBUFFERED: 1

jobs:
  collect-metrics:
    name: Collect CI Metrics
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion != 'cancelled'
    steps:
      - name: Checkout
        uses: actions/checkout@v4.3.0

      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version: "3.12"

      - name: Install analysis tools
        run: |
          pip install requests pandas matplotlib seaborn

      - name: Collect workflow metrics
        id: metrics
        run: |
          python -c "
          import requests
          import json
          import os
          from datetime import datetime, timedelta

          # GitHub API setup
          headers = {
              'Authorization': 'token ${{ secrets.GITHUB_TOKEN }}',
              'Accept': 'application/vnd.github.v3+json'
          }

          repo = '${{ github.repository }}'

          # Get recent workflow runs
          url = f'https://api.github.com/repos/{repo}/actions/runs'
          params = {
              'per_page': 100,
              'created': (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
          }

          response = requests.get(url, headers=headers, params=params)
          runs = response.json().get('workflow_runs', [])

          # Analyze metrics
          ci_runs = [r for r in runs if 'CI' in r['name']]

          if ci_runs:
              avg_duration = sum(
                  (datetime.fromisoformat(r['updated_at'].replace('Z', '+00:00')) -
                   datetime.fromisoformat(r['created_at'].replace('Z', '+00:00'))).total_seconds()
                  for r in ci_runs if r['conclusion'] == 'success'
              ) / len([r for r in ci_runs if r['conclusion'] == 'success']) if any(r['conclusion'] == 'success' for r in ci_runs) else 0

              success_rate = len([r for r in ci_runs if r['conclusion'] == 'success']) / len(ci_runs) * 100

              print(f'avg_duration={avg_duration:.1f}')
              print(f'success_rate={success_rate:.1f}')

              # Save to GitHub outputs
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write(f'avg_duration={avg_duration:.1f}\n')
                  f.write(f'success_rate={success_rate:.1f}\n')
                  f.write(f'total_runs={len(ci_runs)}\n')
          else:
              print('No CI runs found')
          "

      - name: Generate simple metrics report
        if: steps.metrics.outputs.avg_duration
        run: |
          cat > metrics_report.md << 'EOF'
          # CI Metrics (Last 7 days)

          | Metric | Value |
          |--------|-------|
          | Avg Duration | ${{ steps.metrics.outputs.avg_duration }}s |
          | Success Rate | ${{ steps.metrics.outputs.success_rate }}% |
          | Total Runs | ${{ steps.metrics.outputs.total_runs }} |

          Generated: $(date)
          EOF

      - name: Upload metrics report
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ci-metrics-${{ github.run_number }}
          path: metrics_report.md
          retention-days: 30

      - name: Comment metrics on latest PR
        if: github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const fs = require('fs');

            if (fs.existsSync('metrics_report.md')) {
              const report = fs.readFileSync('metrics_report.md', 'utf8');

              // Find the most recent open PR
              const prs = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                per_page: 1
              });

              if (prs.data.length > 0) {
                await github.rest.issues.createComment({
                  issue_number: prs.data[0].number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: report
                });
              }
            }


name: Continuous Integration

# WORKFLOW DISABLED: Moved to workflows-disabled/ after MCMC removal
# This workflow has been updated to exclude MCMC dependencies
# To re-enable: Move to .github/workflows/ and verify dependency groups exist

"on":
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
  schedule:
    # Run weekly dependency vulnerability scan
    - cron: "0 6 * * 1"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHONDONTWRITEBYTECODE: 1
  PYTHONUNBUFFERED: 1
  FORCE_COLOR: 1
  PIP_PROGRESS_BAR: off

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.12", "3.13"]
        exclude:
          # Reduce matrix size for faster CI
          - os: windows-latest
            python-version: "3.13"
          - os: macos-latest
            python-version: "3.13"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.3.0
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5.3.0
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: "requirements*.txt"
          check-latest: true

      - name: Install system dependencies
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            sudo apt-get update && sudo apt-get install -y build-essential
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            brew install gcc
          fi

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -e ".[test,performance,robust]" || pip install -e ".[test]"
        env:
          PIP_DISABLE_PIP_VERSION_CHECK: 1

      - name: Run core tests
        run: |
          pytest homodyne/tests/ -v --tb=short --cov=homodyne --cov-report=xml --cov-report=term-missing --cov-fail-under=80 -x -m "not slow and not integration" --maxfail=3 --durations=10

      - name: Run integration tests
        if: success() || failure()
        run: |
          pytest homodyne/tests/ -v --tb=short -m "integration and not slow" --maxfail=2

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
        continue-on-error: true
        uses: codecov/codecov-action@v4.6.0
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: true

  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.3.0

      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: "requirements*.txt"
          check-latest: true

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
        env:
          PIP_DISABLE_PIP_VERSION_CHECK: 1

      - name: Run Black formatter check
        run: |
          black --check --diff --color homodyne/

      - name: Run flake8 linter
        run: |
          flake8 homodyne/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 homodyne/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Run mypy type checker
        continue-on-error: true
        run: |
          mypy homodyne/ --ignore-missing-imports

      - name: Check import sorting with isort
        run: |
          isort --check-only --diff --profile black homodyne/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.3.0

      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version: "3.12"
          cache: "pip"
          check-latest: true

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml]>=1.7.5 safety>=3.0.0 pip-audit>=2.6.0
        env:
          PIP_DISABLE_PIP_VERSION_CHECK: 1

      - name: Run Bandit security scan
        run: |
          bandit -r homodyne/ --configfile pyproject.toml -f json -o bandit-report.json || true
          bandit -r homodyne/ --configfile pyproject.toml || true

      - name: Run Safety vulnerability check
        continue-on-error: true
        run: |
          safety check --json --output safety-report.json || true
          safety check || true

      - name: Run pip-audit vulnerability check
        continue-on-error: true
        run: |
          pip-audit --requirement requirements.txt --format=json --output=pip-audit-report.json || true
          pip-audit --requirement requirements.txt || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4.6.2
        if: always()
        with:
          name: security-reports-${{ github.run_number }}
          path: |
            bandit-report.json
            safety-report.json
            pip-audit-report.json
          retention-days: 30

  docs:
    name: Documentation Build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.3.0

      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: "requirements*.txt"
          check-latest: true

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[docs]"
        env:
          PIP_DISABLE_PIP_VERSION_CHECK: 1

      - name: Build documentation
        run: |
          cd docs
          make clean
          make html

      - name: Check documentation links
        continue-on-error: true
        run: |
          # Install linkcheck dependencies if available
          pip install sphinx-linkcheck || true
          cd docs && make linkcheck || true

      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: documentation-${{ github.run_number }}
          path: docs/_build/html
          retention-days: 30

  build:
    name: Build Package
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.3.0

      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version: "3.12"
          cache: "pip"
          check-latest: true

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip build twine
        env:
          PIP_DISABLE_PIP_VERSION_CHECK: 1

      - name: Build package
        run: |
          python -m build

      - name: Check package metadata
        run: |
          twine check dist/*

      - name: Test package installation
        run: |
          pip install dist/*.whl
          python -c "import homodyne; print('Package installed successfully')"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: dist-packages-${{ github.run_number }}
          path: dist/
          retention-days: 30

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.3.0
      - name: Dependency Review
        uses: actions/dependency-review-action@v4.5.0
        with:
          fail-on-severity: moderate
          comment-summary-in-pr: true

  notify:
    name: Summary
    runs-on: ubuntu-latest
    needs: [test, quality, security, docs, build]
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: Create summary
        run: |
          echo "## CI Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Quality | ${{ needs.quality.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docs | ${{ needs.docs.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY

# Development Dependencies for Homodyne Scattering Analysis Package
# ==================================================================
# Generated from pyproject.toml [project.optional-dependencies.dev]
# Last updated: v0.7.1 (2024-12-20)
#
# This file contains all dependencies needed for development, testing, and maintenance.
# For production use: pip install -r requirements.txt
# For complete features: pip install -r requirements-optional.txt

# Include core dependencies
-r requirements.txt

# =============================================================================
# Development Environment Setup
# =============================================================================
# For complete development environment, also consider:
# -r requirements-optional.txt (all optional features)

# =============================================================================
# Testing Framework and Utilities
# =============================================================================
pytest>=6.2.0            # Modern testing framework with fixtures and parametrization
pytest-cov>=2.12.0       # Coverage reporting for test suite
pytest-xdist>=2.3.0      # Parallel test execution across multiple cores
pytest-benchmark>=4.0.0  # Performance benchmarking and regression testing
pytest-mock>=3.6.0       # Mocking utilities for isolated unit tests
pytest-html>=4.1.1       # HTML test reports for CI/CD integration
pytest-metadata>=3.1.1   # Test metadata collection and reporting
hypothesis>=6.0.0         # Property-based testing for robust validation
coverage>=6.2.0           # Coverage measurement and reporting

# =============================================================================
# Code Quality and Formatting Tools
# =============================================================================
black>=23.0.0             # Code formatting with consistent style
isort>=5.12.0             # Import sorting and organization
flake8>=6.0.0             # Traditional linting and style checking
mypy>=1.5.0               # Static type checking with type hints
ruff>=0.1.0               # Modern fast linter and formatter (Rust-based)

# =============================================================================
# Security and Vulnerability Scanning
# =============================================================================
bandit>=1.8.0             # Security linter for Python code vulnerabilities
pip-audit>=2.6.0          # Dependency security scanner for known CVEs

# =============================================================================
# Pre-commit Hooks and Automation
# =============================================================================
pre-commit>=3.0.0         # Pre-commit hook framework for quality gates
mdformat>=0.7.19          # Markdown formatting and standardization

# =============================================================================
# Type Checking Stubs and Annotations
# =============================================================================
types-psutil>=5.9.0       # Type stubs for psutil system monitoring
types-Pillow>=10.0.0      # Type stubs for Pillow image processing
types-six>=1.16.0         # Type stubs for six compatibility library
types-requests>=2.28.0    # Type stubs for requests HTTP library

# =============================================================================
# Documentation Generation Tools
# =============================================================================
sphinx>=4.0.0                    # Documentation generator with RST/Markdown support
sphinx-rtd-theme>=1.0.0          # Read the Docs theme for professional documentation
myst-parser>=0.17.0              # Markdown support for Sphinx documentation
sphinx-autodoc-typehints>=1.12.0 # Automatic type hints in API documentation
numpydoc>=1.2.0                  # NumPy-style docstring support and formatting
linkify-it-py>=2.0.0             # Automatic URL link generation in documentation

# =============================================================================
# Development and Distribution Tools
# =============================================================================
tox>=4.0.0                # Testing across multiple Python environments
build>=0.10.0             # Modern Python build tool (PEP 517/518 compatible)
twine>=4.0.0              # Secure package distribution to PyPI

# =============================================================================
# User Experience Tools
# =============================================================================
argcomplete>=3.0.0        # Cross-platform shell tab completion

# =============================================================================
# Development Features Enabled
# =============================================================================
# With these dependencies, you can:
# ✅ Run comprehensive test suite with coverage
# ✅ Perform parallel testing for faster feedback
# ✅ Generate professional HTML test reports
# ✅ Benchmark performance and detect regressions
# ✅ Format code consistently with black and prettier
# ✅ Lint code with modern tools (ruff, mypy, flake8)
# ✅ Scan for security vulnerabilities
# ✅ Generate professional documentation
# ✅ Build and distribute packages
# ✅ Use pre-commit hooks for quality gates
# ✅ Test across multiple Python versions with tox
#
# =============================================================================
# Development Workflow Commands
# =============================================================================
#
# Setup development environment:
# pip install -r requirements-dev.txt
# pre-commit install
#
# Run tests:
# pytest homodyne/tests/                    # Basic test run
# pytest --cov=homodyne --cov-report=html   # With coverage
# pytest -n auto                           # Parallel execution
# pytest --benchmark-only                  # Performance tests only
#
# Code quality:
# black homodyne/                          # Format code
# isort homodyne/                          # Sort imports
# ruff check homodyne/                     # Modern linting
# mypy homodyne/                           # Type checking
# bandit -r homodyne/                      # Security scan
#
# Documentation:
# sphinx-build -b html docs/ docs/_build/  # Build docs
# sphinx-autobuild docs/ docs/_build/      # Live rebuild
#
# Package building:
# python -m build                         # Build wheel and source
# twine check dist/*                      # Check package
# twine upload dist/*                     # Upload to PyPI
[build-system]
requires = ["setuptools>=68.0", "wheel", "setuptools-scm>=8.0"]
build-backend = "setuptools.build_meta"

[project]
name = "homodyne-analysis"
dynamic = ["version"]
description = "Python package for analyzing homodyne scattering in X-ray Photon Correlation Spectroscopy (XPCS) with robust optimization methods"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Wei Chen", email = "wchen@anl.gov"},
    {name = "Hongrui He"},
]
maintainers = [
    {name = "Wei Chen", email = "wchen@anl.gov"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Chemistry",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "Environment :: Console",
    "Natural Language :: English",
]
keywords = [
    "xpcs",
    "homodyne",
    "scattering",
    "correlation-spectroscopy",
    "soft-matter",
    "nonequilibrium-dynamics",
    "optimization",
    "robust-optimization",
    "scientific-computing",
]
requires-python = ">=3.12"
dependencies = [
    "numpy>=1.24.0,<2.4.0",
    "scipy>=1.9.0",
    "matplotlib>=3.5.0",
    "h5py>=3.8.0",  # HDF5 file support for XPCS data loading
]

[project.optional-dependencies]
performance = [
    "numba>=0.62.0,<0.63.0",  # JIT compilation for computational kernels (NumPy 2.2+ compatible)
    "psutil>=5.8.0",  # System monitoring and memory profiling
    "joblib>=1.3.0",  # Parallel processing utilities
]
robust = [
    "cvxpy>=1.4.0",  # Convex optimization for robust methods
]
docs = [
    "sphinx>=8.2.0",
    "sphinx-rtd-theme>=3.0.0",
    "myst-parser>=4.0.0",
    "sphinx-autodoc-typehints>=3.2.0",
    "numpydoc>=1.9.0",
    "linkify-it-py>=2.0.0",
]
test = [
    "pytest>=8.4.0",
    "pytest-cov>=7.0.0",
    "pytest-xdist>=3.6.0",
    "pytest-benchmark>=5.1.0",
    "pytest-mock>=3.12.0",  # For mocking utilities in tests
    "pytest-html>=4.1.1",  # For HTML test reports
    "pytest-metadata>=3.1.1",  # For test metadata
    "hypothesis>=6.0.0",  # For property-based testing
    "coverage>=7.0.0",  # Coverage measurement
]
quality = [
    "black>=25.0.0",
    "isort>=6.0.0",
    "flake8>=7.0.0",
    "mypy>=1.18.0",
    "ruff>=0.13.0",  # Modern linter and formatter
    "bandit>=1.8.6",  # Security linter for Python code
    "pip-audit>=2.6.0",  # Security vulnerability scanner for dependencies
]
typing = [
    "types-psutil>=5.9.0",
    "types-Pillow>=10.0.0",
    "types-six>=1.16.0",
    "types-requests>=2.28.0",
]
dev = [
    "homodyne-analysis[test,docs,quality,performance]",
    "pre-commit>=3.0.0",
    "build>=0.10.0",
    "twine>=4.0.0",
]
all = [
    "homodyne-analysis[performance,robust,dev]",
]

[project.urls]
Homepage = "https://github.com/imewei/homodyne"
Documentation = "https://homodyne.readthedocs.io/"
Repository = "https://github.com/imewei/homodyne"
Issues = "https://github.com/imewei/homodyne/issues"

[project.scripts]
homodyne = "homodyne.run_homodyne:main"
homodyne-config = "homodyne.create_config:main"

[tool.setuptools]
packages = {find = {exclude = ["tests*", "docs*", "examples*", "homodyne.tests*"]}}
include-package-data = true
zip-safe = false  # Ensure compatibility with compiled extensions

[tool.setuptools.package-data]
homodyne = [
    "config_*.json",
    "typings/**/*.pyi",
    "completion_fast.py",
    "cli_completion.py",
]

[tool.setuptools.dynamic]
version = {attr = "homodyne.__version__"}

[tool.black]
line-length = 88
target-version = ['py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | \.ruff_cache
  | build
  | dist
  | __pycache__
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["homodyne"]
skip_glob = ["build/*", "dist/*", "*.egg-info/*"]

[tool.ruff]
line-length = 88
target-version = "py312"
exclude = [
    ".eggs",
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".tox",
    ".venv",
    "__pycache__",
    "build",
    "dist",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "B904",  # raise from within except (acceptable for error context)
    "UP035", # typing import deprecation (gradual migration)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # unused imports in __init__.py
"tests/**/*.py" = ["F401", "F811"]  # allow unused imports in tests
"homodyne/analysis/core.py" = ["RUF001", "RUF002", "RUF003"]  # scientific Greek letters
"homodyne/core/config.py" = ["RUF001", "RUF003"]  # scientific notation
"homodyne/plotting.py" = ["RUF001", "RUF003"]  # scientific Greek letters
"homodyne/run_homodyne.py" = ["RUF003", "E402"]  # scientific notation, completion imports
"homodyne/optimization/classical.py" = ["E402"]  # shared utility imports
"scripts/validate_requirements.py" = ["RUF001"]  # allow info emoji

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--strict-config",
    "--strict-markers",
    "--color=yes",
    "-v",
    "-rs",  # Show reasons for skipped tests in summary
]
testpaths = ["homodyne/tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "performance: marks performance-related tests",
    "benchmark: marks tests for benchmarking (requires pytest-benchmark)",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.mypy]
python_version = "3.12"
mypy_path = "homodyne/typings"
explicit_package_bases = true
exclude = ["homodyne_complete"]

# Scientific computing friendly configuration
warn_return_any = false  # Scientific functions often return Any from libraries
warn_unused_configs = true
disallow_untyped_defs = false  # Scientific code often has complex signatures
disallow_incomplete_defs = false  # Allow gradual typing
check_untyped_defs = false  # Don't check untyped function bodies
disallow_untyped_decorators = false  # Decorators in scientific libs often untyped
no_implicit_optional = false  # Scientific code often has implicit None
warn_redundant_casts = false  # Array types often need explicit casting
warn_unused_ignores = false  # Scientific code may have conditional ignores
warn_no_return = false  # Scientific functions sometimes have complex control flow
warn_unreachable = false  # Scientific code may have conditional branches
strict_equality = false  # NumPy arrays need relaxed equality checks
show_error_codes = true
pretty = true
follow_imports = "silent"  # Don't follow into scientific library internals

[[tool.mypy.overrides]]
module = [
    "numba.*",
    "cvxpy.*",
    "gurobipy.*",
    "numpy.*",
    "scipy.*",
    "matplotlib.*",
    "h5py.*",
    "sklearn.*",
    "psutil.*",
    "argcomplete.*"
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["homodyne.tests.*"]
disallow_untyped_defs = false
check_untyped_defs = false

[tool.coverage.run]
source = ["homodyne"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["homodyne/tests", "tests", "build", "dist"]
skips = [
    "B101",  # Skip assert_used test (common in scientific code)
    "B110",  # Skip try_except_pass (used for graceful degradation)
    "B403",  # Skip pickle import (required for data serialization)
    "B404",  # Skip subprocess import (required for CLI completion and test runner)
    "B603",  # Skip subprocess without shell (we control the input)
]
severity_level = "medium"  # Only report medium and high severity issues
format = "json"  # JSON output for CI integration
output = "bandit_report.json"  # Save results for analysis

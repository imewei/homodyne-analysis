# Modern Python Project Configuration for Homodyne Analysis
# =========================================================
# Revolutionary test suite configuration with latest pytest features,
# CI/CD integration, containerization support, and modern tooling ecosystem

[build-system]
requires = ["setuptools>=80.9.0", "setuptools-scm>=8.1.0", "wheel>=0.45.1"]
build-backend = "setuptools.build_meta"

[project]
name = "homodyne-analysis"
dynamic = ["version"]
description = "High-performance Python package for analyzing homodyne scattering in X-ray Photon Correlation Spectroscopy (XPCS)"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Wei Chen", email = "wchen@anl.gov"},
    {name = "Hongrui He"},
]
maintainers = [
    {name = "Wei Chen", email = "wchen@anl.gov"},
]
keywords = [
    "xpcs", "homodyne", "scattering", "correlation", "spectroscopy",
    "scientific-computing", "physics", "materials-science"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Typing :: Typed",
]
requires-python = ">=3.12"
dependencies = [
    "numpy>=2.1.0",
    "scipy>=1.14.0",
    "matplotlib>=3.9.0",
    "h5py>=3.12.0",
    "pydantic>=2.9.0",
    "typer>=0.13.0",
    "rich>=13.9.0",
    "typing-extensions>=4.12.0; python_version<'3.13'",
]

[project.optional-dependencies]
# Core optional dependencies
performance = [
    "numba>=0.60.0",
    "psutil>=6.0.0",
    "numexpr>=2.10.0",
    "bottleneck>=1.4.0",
    "threadpoolctl>=3.5.0",
    "py-cpuinfo>=9.0.0",
    "cachetools>=5.5.0",
    "joblib>=1.4.0",
]
robust = [
    "cvxpy>=1.5.0",
    "gurobipy>=11.0.0",
    "mosek>=10.2.0",
]
# GPU dependencies removed for CPU-only optimization
# Uncomment if GPU support is needed in the future
# gpu = [
#     "cupy>=12.0.0",
#     "jax[cpu]>=0.4.25",  # CPU-only JAX if needed
# ]

# Modern testing ecosystem with latest features
test = [
    # Core pytest framework with latest features
    "pytest>=8.4.0",
    "pytest-cov>=6.0.0",
    "pytest-xdist>=3.8.0",          # Parallel test execution
    "pytest-benchmark>=5.1.0",       # Performance benchmarking
    "pytest-timeout>=2.3.0",         # Test timeout handling
    "pytest-mock>=3.14.0",           # Advanced mocking
    "pytest-html>=4.2.0",            # Rich HTML reports
    "pytest-json-report>=1.5.0",     # JSON reports for CI
    "pytest-metadata>=3.1.0",        # Test metadata collection
    "pytest-randomly>=3.16.0",       # Randomized test execution
    "pytest-repeat>=0.9.3",          # Test repetition for reliability
    "pytest-picked>=0.5.0",          # Run tests based on git changes
    "pytest-clarity>=1.0.1",         # Better assertion diffs
    "pytest-sugar>=1.0.0",           # Better progress reporting
    "pytest-instafail>=0.5.0",       # Instant failure reporting

    # Advanced testing capabilities
    "hypothesis>=6.112.0",           # Property-based testing
    "faker>=30.0.0",                 # Realistic test data generation
    "factory-boy>=3.3.0",            # Test fixture factories
    "freezegun>=1.5.0",              # Time mocking
    "responses>=0.25.0",             # HTTP request mocking

    # Performance and monitoring
    "memory-profiler>=0.61.0",       # Memory usage profiling
    "py-spy>=0.3.14",                # Python profiler
    "scalene>=1.5.0",                # Advanced performance profiler

    # Notebook testing
    "nbval>=0.10.0",                 # Jupyter notebook validation
    "jupyter>=1.0.0",

    # Data validation
    "pydantic>=2.5.0",               # Data validation
]

# Modern code quality and linting ecosystem
quality = [
    "ruff>=0.13.2",                  # Fast Python linter and formatter
    "black>=25.9.0",                 # Code formatting
    "isort>=5.13.0",                 # Import sorting
    "mypy>=1.18.2",                  # Static type checking
    "bandit>=1.8.6",                 # Security linting
    "safety>=3.6.2",                 # Dependency vulnerability scanning
    "pip-audit>=2.7.0",              # Advanced security auditing
    "pre-commit>=4.0.0",             # Git hook management
    "vulture>=2.13",                 # Dead code detection
    "interrogate>=1.7.0",            # Documentation coverage
]

# Development dependencies
dev = [
    "homodyne-analysis[test,docs,quality,performance]",
    "pre-commit>=3.5.0",
    "build>=1.0.0",
    "twine>=4.0.0",
    "pip-tools>=7.0.0",
    "tox>=4.11.0",                   # Multi-environment testing
    "nox>=2023.4.22",               # Modern task automation
]

# Documentation
docs = [
    "sphinx>=8.2.0",
    "sphinx-rtd-theme>=3.0.0",
    "sphinx-autodoc-typehints>=2.5.0",
    "myst-parser>=4.0.0",
    "sphinx-copybutton>=0.5.3",
    "sphinx-design>=0.6.0",
    "sphinx-autoapi>=3.4.0",
    "numpydoc>=1.8.0",
    "sphinx-gallery>=0.18.0",
]

# Complete development environment (CPU-only)
all = [
    "homodyne-analysis[dev,test,docs,quality,performance,robust]",
]

# CPU-optimized performance stack
cpu_optimized = [
    "homodyne-analysis[performance]",
    "cachetools>=5.3.0",
    "joblib>=1.3.0",
    "multiprocessing-logging>=0.3.4",
]

[project.urls]
Homepage = "https://github.com/imewei/homodyne"
Documentation = "https://homodyne-analysis.readthedocs.io"
Repository = "https://github.com/imewei/homodyne"
Issues = "https://github.com/imewei/homodyne/issues"
Changelog = "https://github.com/imewei/homodyne/blob/main/CHANGELOG.md"

[project.scripts]
homodyne = "homodyne.cli.run_homodyne:main"
homodyne-config = "homodyne.cli.create_config:main"
homodyne-test = "homodyne.tests.test_runner:main"
homodyne-imports = "homodyne.cli.import_manager:main"
homodyne-import-analyzer = "homodyne.tests.import_analyzer:main"
homodyne-workflow-setup = "homodyne.tests.import_workflow_integrator:main"

# =============================================================================
# Tool Configuration - Modern Python Toolchain
# =============================================================================

[tool.setuptools]
packages = ["homodyne"]
include-package-data = true

[tool.setuptools.package-data]
homodyne = [
    "config/*.json",
    "typings/*.pyi",
    "tests/data/*",
    "py.typed",
]

[tool.setuptools_scm]
write_to = "homodyne/_version.py"
version_scheme = "post-release"
local_scheme = "dirty-tag"

# =============================================================================
# Modern Pytest Configuration - Revolutionary Testing Framework
# =============================================================================

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["homodyne/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*", "*Tests"]
python_functions = ["test_*"]

# Robust pytest configuration compatible with basic installations
addopts = [
    # Basic configuration and strictness
    "--strict-config",
    "--strict-markers",
    "--verbose",
    "--tb=short",
    "--durations=10",
    # "--maxfail=5",  # Removed to enable full test discovery
    "--continue-on-collection-errors",
]

# Additional coverage options (uncomment if pytest-cov is installed):
# "--cov=homodyne",
# "--cov-report=term-missing:skip-covered",
# "--cov-report=html:reports/htmlcov",
# "--cov-report=xml:reports/coverage.xml",
# "--cov-fail-under=80",

# Comprehensive test markers for categorization
markers = [
    # Execution speed markers
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "fast: marks tests as fast",
    "smoke: marks tests as smoke tests for basic functionality",

    # Test type markers
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
    "regression: marks tests as regression tests",

    # Feature area markers
    "performance: marks tests as performance benchmarks",
    "security: marks tests as security tests",
    "scientific: marks tests as scientific validation tests",
    "cli: marks tests as CLI tests",
    "api: marks tests as API tests",

    # Technology markers
    "gpu: marks tests that require GPU acceleration",
    "distributed: marks tests for distributed computing",
    "numba: marks tests that require Numba JIT compilation",
    "cvxpy: marks tests that require CVXPY optimization",

    # Quality markers
    "benchmark: marks tests as benchmarks",
    "critical: marks tests as critical path tests",
    "experimental: marks tests as experimental features",
    "deprecated: marks tests for deprecated functionality",

    # CI/CD markers
    "ci_only: marks tests that only run in CI environment",
    "local_only: marks tests that only run locally",
    "nightly: marks tests for nightly builds",
]

# Advanced filtering and warnings management
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::ImportWarning",
    "ignore::ResourceWarning",
    "ignore::RuntimeWarning:numba.*",
    "ignore::FutureWarning:scipy.*",
    "ignore::FutureWarning:numpy.*",
    "ignore::FutureWarning:pandas.*",
    "ignore::pytest.PytestUnraisableExceptionWarning",
]

# Advanced logging configuration
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s (%(filename)s:%(lineno)d)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

log_file = "reports/pytest.log"
log_file_level = "DEBUG"
log_file_format = "%(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(name)s: %(message)s"
log_file_date_format = "%Y-%m-%d %H:%M:%S"

# Performance and execution configuration (requires pytest-timeout plugin)
# timeout = 300
# timeout_method = "thread"

# Test collection and execution
norecursedirs = [
    ".*", "build", "dist", "*.egg", "venv", ".venv",
    "node_modules", "__pycache__", ".pytest_cache"
]

# =============================================================================
# Advanced Coverage Configuration
# =============================================================================

[tool.coverage.run]
source = ["homodyne"]
parallel = true
branch = true
context = "${CONTEXT}"
data_file = "reports/.coverage"
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/setup.py",
    "*/conftest.py",
    "homodyne/_version.py",
    "homodyne/typings/*",
    "homodyne/tests/data/*",
]

[tool.coverage.paths]
source = [
    "homodyne/",
    "/workspace/homodyne/",
    "C:\\*\\homodyne\\",
]

[tool.coverage.report]
show_missing = true
skip_covered = false
skip_empty = true
sort = "cover"
precision = 2
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if 0:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "@overload",
    "\\.\\.\\.",
]

[tool.coverage.html]
directory = "reports/htmlcov"
show_contexts = true
title = "Homodyne Analysis Test Coverage Report"

[tool.coverage.xml]
output = "reports/coverage.xml"

[tool.coverage.json]
output = "reports/coverage.json"
show_contexts = true

# =============================================================================
# Modern Code Quality Tools Configuration
# =============================================================================

[tool.ruff]
target-version = "py312"
line-length = 88
extend-exclude = [
    "__pycache__",
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    "_build",
    "build",
    "dist",
    "venv",
    "reports",
]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # Pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate
    "PL",   # Pylint
    "RUF",  # Ruff-specific rules
    "S",    # flake8-bandit
    "T20",  # flake8-print
    "PIE",  # flake8-pie (unnecessary code)
    "TID",  # flake8-tidy-imports
    "ICN",  # flake8-import-conventions
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "FLY",  # flynt (string formatting)
    "PERF", # perflint (performance)
    "FURB", # refurb (code modernization)
    "LOG",  # flake8-logging
]
ignore = [
    "E501",    # line too long, handled by black
    "B008",    # do not perform function calls in argument defaults
    "B023",    # function definition does not bind loop variable
    "C901",    # too complex
    "PLR0913", # too many arguments
    "PLR0915", # too many statements
    "S101",    # use of assert for tests
    "T201",    # print statements (allowed in CLI)
    "PLR0912", # too many branches
    "PLR0911", # too many return statements
    "SLF001",  # private member access (needed for internal testing)
]

# Additional configuration for dead code prevention
[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true


[tool.ruff.lint.pylint]
max-args = 12  # Allow up to 12 arguments for scientific functions
max-branches = 15  # Allow complex scientific logic
max-returns = 8   # Allow multiple return paths for error handling
max-statements = 60  # Allow longer functions for scientific computations

[tool.ruff.lint.mccabe]
max-complexity = 15  # Reasonable complexity for scientific code

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "F403", "F405"]
"tests/**/*" = ["PLR2004", "S101", "S311", "ARG001", "T201"]
"homodyne/tests/**/*" = ["PLR2004", "S101", "S311", "ARG001", "T201"]
"**/test_*.py" = ["PLR2004", "S101", "S311", "ARG001", "T201"]

[tool.ruff.lint.isort]
known-first-party = ["homodyne"]
force-single-line = true

[tool.black]
target-version = ["py312", "py313"]
line-length = 88
extend-exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.ruff_cache
  | \.venv
  | _build
  | build
  | dist
  | venv
  | reports
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["homodyne"]
force_single_line = true

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
disallow_untyped_defs = false  # Scientific code often has complex signatures
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
show_error_codes = true
show_column_numbers = true

[[tool.mypy.overrides]]
module = [
    "numba.*",
    "scipy.*",
    "matplotlib.*",
    "h5py.*",
    "cupy.*",
    "jax.*",
    "cvxpy.*",
    "gurobipy.*",
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests", "test_*", "homodyne/tests"]
skips = ["B101", "B601"]

# =============================================================================
# Performance and Benchmarking Configuration
# =============================================================================

[tool.pytest.benchmark]
min_rounds = 5
max_time = 2.0
min_time = 0.000005
warmup = false
warmup_iterations = 100000
disable_gc = false
sort = "mean"
group_by = "func"
save = "reports/benchmarks/.benchmarks"
save_data = true
autosave = true
compare = "reports/benchmarks/.benchmarks/*"

# =============================================================================
# Modern Development Tools Configuration
# =============================================================================

[tool.pip-tools]
generate-hashes = true
allow-unsafe = true
upgrade = true
resolver = "backtracking"
strip-extras = true

[tool.vulture]
exclude = ["tests/", "build/", "dist/"]
ignore_decorators = ["@pytest.fixture", "@pytest.mark.*"]
min_confidence = 60

[tool.interrogate]
ignore-init-method = true
ignore-init-module = false
ignore-magic = false
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = false
ignore-nested-functions = false
ignore-nested-classes = true
ignore-setters = false
fail-under = 80
exclude = ["setup.py", "docs", "build", "tests"]
verbose = 0
quiet = false
whitelist-regex = []
color = true
omit-covered-files = false

# =============================================================================
# CI/CD and Build Configuration
# =============================================================================

[tool.tox]
legacy_tox_ini = """
[tox]
isolated_build = true
envlist = py{312,313}, coverage, docs, lint, security

[testenv]
deps =
    homodyne-analysis[test]
commands =
    pytest homodyne/tests {posargs}

[testenv:coverage]
deps =
    homodyne-analysis[test]
commands =
    pytest --cov=homodyne --cov-report=xml --cov-report=html

[testenv:docs]
deps =
    homodyne-analysis[docs]
commands =
    sphinx-build -W -b html docs docs/_build/html

[testenv:lint]
deps =
    homodyne-analysis[quality]
commands =
    ruff check homodyne
    black --check homodyne
    mypy homodyne

[testenv:security]
deps =
    homodyne-analysis[quality]
commands =
    bandit -r homodyne
    safety check
    pip-audit
"""

[tool.cibuildwheel]
build = "cp312-* cp313-*"
skip = "*-win32 *-manylinux_i686"
test-command = "python -m pytest {project}/homodyne/tests -x"
test-extras = ["test"]

[tool.cibuildwheel.linux]
before-all = "yum install -y gcc gcc-c++ make"

[tool.cibuildwheel.macos]
before-all = "brew install gcc"

[tool.cibuildwheel.windows]
before-all = "choco install mingw"
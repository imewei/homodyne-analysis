# Consolidated Pre-commit Configuration for Homodyne Analysis Package
# ====================================================================
#
# Think-Ultra Optimized Configuration
# Combines quality checks, dead code detection, and scientific computing best practices
#
# Install: pip install pre-commit && pre-commit install
# Usage: pre-commit run --all-files

repos:
  # ═══════════════════════════════════════════════════════════════════
  # PHASE 1: BASIC FILE HYGIENE (Fast execution)
  # ═══════════════════════════════════════════════════════════════════
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: trailing-whitespace
        name: remove-trailing-whitespace
        args: [--markdown-linebreak-ext=md]
        description: "Remove trailing whitespace"
      - id: end-of-file-fixer
        name: fix-eof
        description: "Ensure files end with newline"
      - id: mixed-line-ending
        name: normalize-line-endings
        args: [--fix=lf]
        description: "Normalize line endings to LF"
      - id: check-merge-conflict
        name: check-merge-conflicts
        description: "Check for merge conflict markers"
      - id: check-case-conflict
        name: check-case-conflicts
        description: "Check for case conflicts"
      - id: check-added-large-files
        name: check-large-files
        args: [--maxkb=1000]
        description: "Prevent large files from being committed"
      - id: debug-statements
        name: check-debug-statements
        description: "Check for debugger imports and breakpoint() calls"

  # ═══════════════════════════════════════════════════════════════════
  # PHASE 2: SYNTAX AND STRUCTURE VALIDATION
  # ═══════════════════════════════════════════════════════════════════
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: check-yaml
        name: validate-yaml
        args: [--allow-multiple-documents]
        description: "Validate YAML syntax"
      - id: check-json
        name: validate-json
        description: "Validate JSON syntax"
      - id: check-toml
        name: validate-toml
        description: "Validate TOML syntax"

  # ═══════════════════════════════════════════════════════════════════
  # PHASE 3: DEAD CODE AND UNUSED CODE DETECTION
  # ═══════════════════════════════════════════════════════════════════

  # Unused imports and variables detection
  - repo: https://github.com/hakancelik96/unimport
    rev: 1.2.1
    hooks:
      - id: unimport
        name: detect-unused-imports
        args: [--remove-all, --check, --diff]
        description: "Detect and remove unused imports and variables"
        exclude: ^(homodyne/tests/|tests/|.*test.*\.py$|__init__\.py$)

  # Dead code detection with vulture
  - repo: https://github.com/jendrikseipp/vulture
    rev: v2.13
    hooks:
      - id: vulture
        name: detect-dead-code
        args: [--min-confidence=80, --sort-by-size]
        description: "Find unused Python code (functions, classes, variables)"
        exclude: ^(homodyne/tests/|tests/|.*test.*\.py$|__init__\.py$)

  # Dead function detection
  - repo: https://github.com/asottile/dead
    rev: v1.5.2
    hooks:
      - id: dead
        name: detect-dead-functions
        description: "Find dead Python functions and methods"
        exclude: ^(homodyne/tests/|tests/|.*test.*\.py$|__init__\.py$)

  # ═══════════════════════════════════════════════════════════════════
  # PHASE 4: CODE FORMATTING (Order matters: isort → black → ruff-format)
  # ═══════════════════════════════════════════════════════════════════

  # Import sorting (must run before black)
  - repo: https://github.com/pycqa/isort
    rev: 6.0.1
    hooks:
      - id: isort
        name: sort-imports
        description: "Sort Python imports alphabetically and by type"
        args: [--profile=black, --line-length=88, --multi-line=3]
        types: [python]

  # Code formatting with Black (must run after isort)
  - repo: https://github.com/psf/black
    rev: 25.9.0
    hooks:
      - id: black
        name: format-python-code
        description: "Format Python code with Black"
        args: [--line-length=88, --target-version=py312]
        types_or: [python, pyi]
        require_serial: true

  # Modern Rust-based formatting (final formatter)
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.13.2
    hooks:
      - id: ruff-format
        name: ruff-format-final
        description: "Final formatting pass with Ruff"
        types: [python]

  # ═══════════════════════════════════════════════════════════════════
  # PHASE 5: LINTING AND STATIC ANALYSIS
  # ═══════════════════════════════════════════════════════════════════

  # Modern fast linting with Ruff
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.13.2
    hooks:
      - id: ruff
        name: ruff-linting
        description: "Fast Python linting with auto-fixes"
        args: [--fix, --exit-non-zero-on-fix, --show-fixes]
        types: [python]

  # Traditional linting with flake8 (complementary to ruff)
  - repo: https://github.com/pycqa/flake8
    rev: 7.3.0
    hooks:
      - id: flake8
        name: flake8-linting
        description: "Traditional Python linting for additional checks"
        args:
          - --max-line-length=88
          - --extend-ignore=E203,W503,E501,E402
          - --per-file-ignores=homodyne/ui/*.py:F401,homodyne/tests/*.py:F401,**/test_*.py:F401
          - --exclude=build,dist,.eggs,*.egg-info,.tox,.venv,venv
        types: [python]

  # ═══════════════════════════════════════════════════════════════════
  # PHASE 6: TYPE CHECKING AND COMPLEXITY ANALYSIS
  # ═══════════════════════════════════════════════════════════════════

  # Static type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.18.2
    hooks:
      - id: mypy
        name: type-checking
        description: "Static type checking for Python"
        args: [--config-file=pyproject.toml, --show-error-codes]
        additional_dependencies:
          - types-psutil
          - types-requests
          - types-PyYAML
          - numpy
          - matplotlib
          - scipy
        exclude: ^(homodyne/tests/|tests/|build/|dist/|docs/|scripts/)
        types: [python]

  # Code complexity monitoring
  - repo: https://github.com/rubik/xenon
    rev: v0.9.1
    hooks:
      - id: xenon
        name: complexity-check
        description: "Monitor code complexity and maintainability"
        args: [--max-average=C, --max-modules=C, --max-absolute=C, --ignore=__init__.py]
        exclude: ^(homodyne/tests/|tests/|.*test.*\.py$)
        types: [python]

  # ═══════════════════════════════════════════════════════════════════
  # PHASE 7: SECURITY SCANNING
  # ═══════════════════════════════════════════════════════════════════

  # Security vulnerability scanning
  - repo: https://github.com/PyCQA/bandit
    rev: 1.8.6
    hooks:
      - id: bandit
        name: security-scan
        description: "Security linter for Python code"
        args:
          - --recursive
          - --format=json
          - --output=bandit_security_report.json
          - --severity-level=medium
          - --confidence-level=medium
          - --skip=B101,B110,B403,B404,B603,B607
        exclude: ^(homodyne/tests/|tests/|build/|dist/|docs/)
        types: [python]

  # ═══════════════════════════════════════════════════════════════════
  # PHASE 8: CUSTOM HOMODYNE-SPECIFIC QUALITY CHECKS
  # ═══════════════════════════════════════════════════════════════════

  # Custom quality checks (if modules exist)
  - repo: local
    hooks:
      - id: homodyne-dead-code-check
        name: homodyne-deadcode-detection
        entry: python -c "try:\n    from homodyne.tests.test_dead_code_detection_pipeline import main\n    main()\nexcept ImportError:\n    print('Dead code detection module not available, skipping...')\n    exit(0)"
        language: python
        files: \.py$
        exclude: ^(homodyne/tests/|tests/|.*test.*\.py$|__init__\.py$)
        description: "Custom dead code detection for Homodyne package"
        pass_filenames: false

      - id: homodyne-quality-metrics
        name: homodyne-quality-check
        entry: python -c "try:\n    from homodyne.tests.test_code_quality_metrics import main\n    main()\nexcept ImportError:\n    print('Quality metrics module not available, skipping...')\n    exit(0)"
        language: python
        files: \.py$
        description: "Code quality metrics validation for Homodyne"
        pass_filenames: false

  # ═══════════════════════════════════════════════════════════════════
  # PHASE 9: DOCUMENTATION AND MARKUP FORMATTING
  # ═══════════════════════════════════════════════════════════════════

  # Markdown formatting
  - repo: https://github.com/executablebooks/mdformat
    rev: 0.7.19
    hooks:
      - id: mdformat
        name: format-markdown
        description: "Format Markdown files"
        args: [--wrap=88, --number]
        types: [markdown]

  # YAML and JSON formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      - id: prettier
        name: format-yaml-json
        description: "Format YAML and JSON files"
        args: [--write, --tab-width=2, --print-width=88]
        types_or: [yaml, json]

  # ═══════════════════════════════════════════════════════════════════
  # PHASE 10: JUPYTER NOTEBOOK PROCESSING
  # ═══════════════════════════════════════════════════════════════════

  # Jupyter notebook formatting and linting
  - repo: https://github.com/nbQA-dev/nbQA
    rev: 1.8.7
    hooks:
      - id: nbqa-black
        name: format-notebooks-black
        description: "Format Jupyter notebooks with Black"
        args: [--line-length=88]
        types: [jupyter]

      - id: nbqa-isort
        name: format-notebooks-isort
        description: "Sort imports in Jupyter notebooks"
        args: [--profile=black, --line-length=88]
        types: [jupyter]

# ═══════════════════════════════════════════════════════════════════════
# GLOBAL CONFIGURATION AND OPTIMIZATION
# ═══════════════════════════════════════════════════════════════════════

# Language versions
default_language_version:
  python: python3.12
  node: "18"

# Performance and behavior optimization
default_install_hook_types: [pre-commit, pre-push, commit-msg]
fail_fast: false                    # Run all hooks for comprehensive checking
minimum_pre_commit_version: "3.0.0"

# CI/CD Integration
ci:
  autofix_prs: true
  autofix_commit_msg: "🔧 Auto-fix: pre-commit hooks [skip ci]"
  autoupdate_schedule: "monthly"
  autoupdate_commit_msg: "⬆️ Update: pre-commit hooks autoupdate"
  skip: [
    # Skip expensive hooks in CI (run manually)
    vulture-deadcode,
    dead-functions,
    homodyne-deadcode-detection,
    complexity-check,
    security-scan
  ]

# Global exclusions for performance
exclude: |
  (?x)^(
      \.eggs/|
      \.git/|
      \.github/|
      \.hg/|
      \.mypy_cache/|
      \.pytest_cache/|
      \.ruff_cache/|
      \.tox/|
      \.venv/|
      venv/|
      __pycache__/|
      _build/|
      build/|
      dist/|
      .*\.egg-info/|
      bandit_security_report\.json|
      coverage\.xml|
      htmlcov/|
      \.agent-os/|
      \.claude/|
      node_modules/
  )$

# Performance metadata
# Expected execution time: ~15-30s for full run
# Hook count: 25 hooks across 10 phases
# Optimized for: Scientific computing, dead code prevention, security